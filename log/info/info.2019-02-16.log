20:44:23.597 febs [main] INFO  cn.hu.Application - Starting Application on XD5543A14LPMZRB with PID 4900 (D:\ms\ms\target\classes started by Administrator in D:\ms\ms)
20:44:23.597 febs [main] INFO  cn.hu.Application - No active profile set, falling back to default profiles: default
20:44:23.785 febs [main] INFO  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@740773a3: startup date [Sat Feb 16 20:44:23 CST 2019]; root of context hierarchy
20:44:25.475 febs [main] INFO  o.s.b.f.s.DefaultListableBeanFactory - Overriding bean definition for bean 'shiroRealm' with a different definition: replacing [Generic bean: class [cn.hu.common.shiro.ShiroRealm]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [D:\ms\ms\target\classes\cn\hu\common\shiro\ShiroRealm.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=shiroConfig; factoryMethodName=shiroRealm; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [cn/hu/common/shiro/ShiroConfig.class]]
20:44:25.794 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
20:44:26.544 febs [main] INFO  c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor - Post-processing PropertySource instances
20:44:26.726 febs [main] INFO  c.u.j.EncryptablePropertySourceConverter - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
20:44:26.742 febs [main] INFO  c.u.j.EncryptablePropertySourceConverter - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
20:44:26.742 febs [main] INFO  c.u.j.EncryptablePropertySourceConverter - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
20:44:26.742 febs [main] INFO  c.u.j.EncryptablePropertySourceConverter - Converting PropertySource systemProperties [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
20:44:26.742 febs [main] INFO  c.u.j.EncryptablePropertySourceConverter - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableMapPropertySourceWrapper
20:44:26.742 febs [main] INFO  c.u.j.EncryptablePropertySourceConverter - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
20:44:26.742 febs [main] INFO  c.u.j.EncryptablePropertySourceConverter - Converting PropertySource applicationConfig: [classpath:/application.yml] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
20:44:26.851 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'asyncExecutorPoolConfig' of type [cn.hu.common.config.AsyncExecutorPoolConfig$$EnhancerBySpringCGLIB$$7cd8e62f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:27.039 febs [main] INFO  c.u.j.f.DefaultLazyPropertyFilter - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
20:44:27.054 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidSpringAopConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidSpringAopConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:27.195 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.context.properties.ConversionServiceDeducer$Factory' of type [org.springframework.boot.context.properties.ConversionServiceDeducer$Factory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:27.429 febs [main] INFO  c.u.j.r.DefaultLazyPropertyResolver - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
20:44:27.429 febs [main] INFO  c.u.j.d.DefaultLazyPropertyDetector - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
20:44:27.445 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource.druid-com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties' of type [com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:27.461 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'advisor' of type [org.springframework.aop.support.RegexpMethodPointcutAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:27.492 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisConfig' of type [cn.hu.common.config.RedisConfig$$EnhancerBySpringCGLIB$$50a6d6ff] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:27.586 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b2ca2d24] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:27.669 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'febsProperties' of type [cn.hu.common.config.FebsProperties$$EnhancerBySpringCGLIB$$e6434ab3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:27.669 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroConfig' of type [cn.hu.common.shiro.ShiroConfig$$EnhancerBySpringCGLIB$$e521771a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:28.406 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:28.422 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myBatisConfig' of type [cn.hu.common.config.MyBatisConfig$$EnhancerBySpringCGLIB$$2c5bf1f7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:28.422 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlStatementInterceptor' of type [cn.hu.common.interceptor.SqlStatementInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:28.438 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$e59e7e54] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:28.453 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$cc762296] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:28.453 febs [main] INFO  c.a.d.s.b.a.DruidDataSourceAutoConfigure - Init DruidDataSource
20:44:29.047 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:29.085 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:29.210 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:29.976 febs [main] INFO  c.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
20:44:29.976 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:30.273 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:30.828 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:30.843 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:30.843 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:30.859 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [com.sun.proxy.$Proxy94] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:30.890 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:30.890 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:30.922 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleService' of type [cn.hu.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:31.000 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userService' of type [cn.hu.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:31.125 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:31.125 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [com.sun.proxy.$Proxy102] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:31.140 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:31.156 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy103] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:31.172 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuService' of type [cn.hu.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:31.203 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleService' of type [cn.hu.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:31.281 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:31.283 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [com.sun.proxy.$Proxy104] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:31.283 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuService' of type [cn.hu.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:31.330 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroRealm' of type [cn.hu.common.shiro.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:31.627 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:31.642 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:31.674 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:31.705 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
20:44:32.392 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
20:44:32.418 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
20:44:32.449 febs [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
20:44:32.449 febs [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.32
20:44:32.449 febs [localhost-startStop-1] INFO  o.a.c.core.AprLifecycleListener - The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_191\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_191/bin/server;C:/Program Files/Java/jre1.8.0_191/bin;C:/Program Files/Java/jre1.8.0_191/lib/amd64;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\ProgramData\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\nodejs\;"C:\sdk\platform-tools;C:\sdk\tools\bin;";C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Microsoft VS Code\bin;C:\Program Files\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Microsoft VS Code\bin;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\eclipse;;.]
20:44:32.683 febs [localhost-startStop-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
20:44:32.683 febs [localhost-startStop-1] INFO  o.s.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 8898 ms
20:44:32.918 febs [localhost-startStop-1] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
20:44:32.918 febs [localhost-startStop-1] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
20:44:32.918 febs [localhost-startStop-1] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
20:44:32.918 febs [localhost-startStop-1] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
20:44:32.918 febs [localhost-startStop-1] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'xssFilter' to urls: [/*]
20:44:32.918 febs [localhost-startStop-1] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'webStatFilter' to urls: [/*]
20:44:32.918 febs [localhost-startStop-1] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'shiroFilterFactoryBean' to: [/*]
20:44:32.918 febs [localhost-startStop-1] INFO  o.s.b.w.s.ServletRegistrationBean - Servlet dispatcherServlet mapped to [/]
20:44:32.918 febs [localhost-startStop-1] INFO  o.s.b.w.s.ServletRegistrationBean - Servlet statViewServlet mapped to [/druid/*]
20:44:32.965 febs [localhost-startStop-1] INFO  cn.hu.common.xss.XssFilter - ------------ xss filter init ------------
20:44:34.121 febs [main] INFO  o.s.s.c.ThreadPoolTaskExecutor - Initializing ExecutorService  'taskExecutor'
20:44:34.385 febs [main] INFO  o.s.w.s.h.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
20:44:34.822 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@740773a3: startup date [Sat Feb 16 20:44:23 CST 2019]; root of context hierarchy
20:44:34.963 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/common/download]}" onto public void cn.hu.common.controller.CommonController.fileDownload(java.lang.String,java.lang.Boolean,javax.servlet.http.HttpServletResponse) throws java.io.IOException,cn.hu.common.exception.FileDownloadException
20:44:34.963 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/test],methods=[GET]}" onto public int cn.hu.common.controller.TestController.testLimiter()
20:44:34.963 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/backuser]}" onto public java.lang.String cn.hu.system.controller.BackUserController.index(org.springframework.ui.Model)
20:44:34.963 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/backuser/updateUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.BackUserController.updateUserProfile(cn.hu.system.domain.User)
20:44:34.963 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/backuser/list]}" onto public java.util.Map<java.lang.String, java.lang.Object> cn.hu.system.controller.BackUserController.userList(cn.hu.common.domain.QueryRequest,cn.hu.system.domain.User)
20:44:34.963 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/backuser/add]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.BackUserController.addUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:34.963 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/backuser/theme]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.BackUserController.updateTheme(cn.hu.system.domain.User)
20:44:34.963 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/backuser/checkUserName]}" onto public boolean cn.hu.system.controller.BackUserController.checkUserName(java.lang.String,java.lang.String)
20:44:34.963 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/backuser/profile]}" onto public java.lang.String cn.hu.system.controller.BackUserController.profileIndex(org.springframework.ui.Model)
20:44:34.963 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/backuser/updatePassword]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.BackUserController.updatePassword(java.lang.String)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/backuser/excel]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.BackUserController.userExcel(cn.hu.system.domain.User)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/backuser/getUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.BackUserController.getUserProfile(java.lang.Long)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/backuser/changeAvatar]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.BackUserController.changeAvatar(java.lang.String)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/backuser/getUser]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.BackUserController.getUser(java.lang.Long)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/backuser/regist]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.BackUserController.regist(cn.hu.system.domain.User)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/backuser/csv]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.BackUserController.userCsv(cn.hu.system.domain.User)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/backuser/update]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.BackUserController.updateUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/backuser/delete]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.BackUserController.deleteUsers(java.lang.String)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/backuser/checkPassword]}" onto public boolean cn.hu.system.controller.BackUserController.checkPassword(java.lang.String)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/base]}" onto public java.lang.String cn.hu.system.controller.BaseSettingController.index()
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/base/list]}" onto public java.util.Map<java.lang.String, java.lang.Object> cn.hu.system.controller.BaseSettingController.dictList(cn.hu.common.domain.QueryRequest,cn.hu.system.domain.Dict)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/base/excel]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.BaseSettingController.dictExcel(cn.hu.system.domain.Dict)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/base/add]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.BaseSettingController.addDict(cn.hu.system.domain.Dict)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/base/delete]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.BaseSettingController.deleteDicts(java.lang.String)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/base/getDict]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.BaseSettingController.getDict(java.lang.Long)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/base/csv]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.BaseSettingController.dictCsv(cn.hu.system.domain.Dict)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/base/update]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.BaseSettingController.updateDict(cn.hu.system.domain.Dict)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/dept]}" onto public java.lang.String cn.hu.system.controller.DeptController.index()
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/dept/add]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.DeptController.addRole(cn.hu.system.domain.Dept)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/dept/update]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.DeptController.updateRole(cn.hu.system.domain.Dept)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/dept/tree]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.DeptController.getDeptTree()
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/dept/getDept]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.DeptController.getDept(java.lang.Long)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/dept/excel]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.DeptController.deptExcel(cn.hu.system.domain.Dept)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/dept/delete]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.DeptController.deleteDepts(java.lang.String)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/dept/csv]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.DeptController.deptCsv(cn.hu.system.domain.Dept)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/dept/checkDeptName]}" onto public boolean cn.hu.system.controller.DeptController.checkDeptName(java.lang.String,java.lang.String)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/dept/list]}" onto public java.util.List<cn.hu.system.domain.Dept> cn.hu.system.controller.DeptController.deptList(cn.hu.system.domain.Dept)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/dict]}" onto public java.lang.String cn.hu.system.controller.DictController.index()
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/dict/list]}" onto public java.util.Map<java.lang.String, java.lang.Object> cn.hu.system.controller.DictController.dictList(cn.hu.common.domain.QueryRequest,cn.hu.system.domain.Dict)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/dict/excel]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.DictController.dictExcel(cn.hu.system.domain.Dict)
20:44:34.979 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/dict/add]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.DictController.addDict(cn.hu.system.domain.Dict)
20:44:34.994 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/dict/delete]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.DictController.deleteDicts(java.lang.String)
20:44:34.994 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/dict/getDict]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.DictController.getDict(java.lang.Long)
20:44:34.994 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/dict/csv]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.DictController.dictCsv(cn.hu.system.domain.Dict)
20:44:34.994 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/dict/update]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.DictController.updateDict(cn.hu.system.domain.Dict)
20:44:34.994 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/frontuser]}" onto public java.lang.String cn.hu.system.controller.FrontUserController.index(org.springframework.ui.Model)
20:44:34.994 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/frontuser/updateUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.FrontUserController.updateUserProfile(cn.hu.system.domain.User)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/frontuser/list]}" onto public java.util.Map<java.lang.String, java.lang.Object> cn.hu.system.controller.FrontUserController.userList(cn.hu.common.domain.QueryRequest,cn.hu.system.domain.User)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/frontuser/add]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.FrontUserController.addUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/frontuser/theme]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.FrontUserController.updateTheme(cn.hu.system.domain.User)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/frontuser/checkUserName]}" onto public boolean cn.hu.system.controller.FrontUserController.checkUserName(java.lang.String,java.lang.String)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/frontuser/profile]}" onto public java.lang.String cn.hu.system.controller.FrontUserController.profileIndex(org.springframework.ui.Model)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/frontuser/updatePassword]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.FrontUserController.updatePassword(java.lang.String)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/frontuser/excel]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.FrontUserController.userExcel(cn.hu.system.domain.User)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/frontuser/getUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.FrontUserController.getUserProfile(java.lang.Long)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/frontuser/changeAvatar]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.FrontUserController.changeAvatar(java.lang.String)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/frontuser/getUser]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.FrontUserController.getUser(java.lang.Long)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/frontuser/regist]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.FrontUserController.regist(cn.hu.system.domain.User)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/frontuser/csv]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.FrontUserController.userCsv(cn.hu.system.domain.User)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/frontuser/update]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.FrontUserController.updateUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/frontuser/delete]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.FrontUserController.deleteUsers(java.lang.String)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/frontuser/checkPassword]}" onto public boolean cn.hu.system.controller.FrontUserController.checkPassword(java.lang.String)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goodscategory]}" onto public java.lang.String cn.hu.system.controller.GoodsCategoryController.index()
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goodscategory/add]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsCategoryController.addRole(cn.hu.system.domain.Dept)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goodscategory/update]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsCategoryController.updateRole(cn.hu.system.domain.Dept)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goodscategory/tree]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsCategoryController.getDeptTree()
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goodscategory/getDept]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsCategoryController.getDept(java.lang.Long)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goodscategory/excel]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsCategoryController.deptExcel(cn.hu.system.domain.Dept)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goodscategory/delete]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsCategoryController.deleteDepts(java.lang.String)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goodscategory/csv]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsCategoryController.deptCsv(cn.hu.system.domain.Dept)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goodscategory/checkDeptName]}" onto public boolean cn.hu.system.controller.GoodsCategoryController.checkDeptName(java.lang.String,java.lang.String)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goodscategory/list]}" onto public java.util.List<cn.hu.system.domain.Dept> cn.hu.system.controller.GoodsCategoryController.deptList(cn.hu.system.domain.Dept)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goods]}" onto public java.lang.String cn.hu.system.controller.GoodsController.index(org.springframework.ui.Model)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goods/updateUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsController.updateUserProfile(cn.hu.system.domain.User)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goods/list]}" onto public java.util.Map<java.lang.String, java.lang.Object> cn.hu.system.controller.GoodsController.userList(cn.hu.common.domain.QueryRequest,cn.hu.system.domain.User)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goods/add]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsController.addUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goods/theme]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsController.updateTheme(cn.hu.system.domain.User)
20:44:35.010 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goods/checkUserName]}" onto public boolean cn.hu.system.controller.GoodsController.checkUserName(java.lang.String,java.lang.String)
20:44:35.026 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goods/profile]}" onto public java.lang.String cn.hu.system.controller.GoodsController.profileIndex(org.springframework.ui.Model)
20:44:35.026 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goods/updatePassword]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsController.updatePassword(java.lang.String)
20:44:35.026 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goods/excel]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsController.userExcel(cn.hu.system.domain.User)
20:44:35.026 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goods/getUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsController.getUserProfile(java.lang.Long)
20:44:35.026 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goods/changeAvatar]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsController.changeAvatar(java.lang.String)
20:44:35.026 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goods/getUser]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsController.getUser(java.lang.Long)
20:44:35.026 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goods/regist]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsController.regist(cn.hu.system.domain.User)
20:44:35.026 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goods/csv]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsController.userCsv(cn.hu.system.domain.User)
20:44:35.026 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goods/update]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsController.updateUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.026 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goods/delete]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.GoodsController.deleteUsers(java.lang.String)
20:44:35.026 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/goods/checkPassword]}" onto public boolean cn.hu.system.controller.GoodsController.checkPassword(java.lang.String)
20:44:35.026 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/log]}" onto public java.lang.String cn.hu.system.controller.LogController.index()
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/log/csv]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.LogController.logCsv(cn.hu.system.domain.SysLog)
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/log/list]}" onto public java.util.Map<java.lang.String, java.lang.Object> cn.hu.system.controller.LogController.logList(cn.hu.common.domain.QueryRequest,cn.hu.system.domain.SysLog)
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/log/delete]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.LogController.deleteLogss(java.lang.String)
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/log/excel]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.LogController.logExcel(cn.hu.system.domain.SysLog)
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/index]}" onto public java.lang.String cn.hu.system.controller.LoginController.index(org.springframework.ui.Model)
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/403],methods=[GET]}" onto public java.lang.String cn.hu.system.controller.LoginController.forbid()
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/]}" onto public java.lang.String cn.hu.system.controller.LoginController.redirectIndex()
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/gifCode],methods=[GET]}" onto public void cn.hu.system.controller.LoginController.getGifCode(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login],methods=[GET]}" onto public java.lang.String cn.hu.system.controller.LoginController.login()
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login],methods=[POST]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.LoginController.login(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean)
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/menu]}" onto public java.lang.String cn.hu.system.controller.MenuController.index()
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/menu/menuButtonTree]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.MenuController.getMenuButtonTree()
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/menu/list]}" onto public java.util.List<cn.hu.system.domain.Menu> cn.hu.system.controller.MenuController.menuList(cn.hu.system.domain.Menu)
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/menu/urlList],methods=[GET]}" onto public java.util.List<java.util.Map<java.lang.String, java.lang.String>> cn.hu.system.controller.MenuController.getAllUrl()
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/menu/getUserMenu]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.MenuController.getUserMenu(java.lang.String)
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/menu/getMenu]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.MenuController.getMenu(java.lang.Long)
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/menu/menu]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.MenuController.getMenu(java.lang.String)
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/menu/csv]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.MenuController.menuCsv(cn.hu.system.domain.Menu)
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/menu/add]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.MenuController.addMenu(cn.hu.system.domain.Menu)
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/menu/checkMenuName]}" onto public boolean cn.hu.system.controller.MenuController.checkMenuName(java.lang.String,java.lang.String,java.lang.String)
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/menu/excel]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.MenuController.menuExcel(cn.hu.system.domain.Menu)
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/menu/delete]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.MenuController.deleteMenus(java.lang.String)
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/menu/tree]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.MenuController.getMenuTree()
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/menu/update]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.MenuController.updateMenu(cn.hu.system.domain.Menu)
20:44:35.041 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/orders]}" onto public java.lang.String cn.hu.system.controller.OrdersController.index(org.springframework.ui.Model)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/orders/updateUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.OrdersController.updateUserProfile(cn.hu.system.domain.User)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/orders/list]}" onto public java.util.Map<java.lang.String, java.lang.Object> cn.hu.system.controller.OrdersController.userList(cn.hu.common.domain.QueryRequest,cn.hu.system.domain.User)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/orders/add]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.OrdersController.addUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/orders/theme]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.OrdersController.updateTheme(cn.hu.system.domain.User)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/orders/checkUserName]}" onto public boolean cn.hu.system.controller.OrdersController.checkUserName(java.lang.String,java.lang.String)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/orders/profile]}" onto public java.lang.String cn.hu.system.controller.OrdersController.profileIndex(org.springframework.ui.Model)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/orders/updatePassword]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.OrdersController.updatePassword(java.lang.String)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/orders/excel]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.OrdersController.userExcel(cn.hu.system.domain.User)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/orders/getUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.OrdersController.getUserProfile(java.lang.Long)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/orders/changeAvatar]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.OrdersController.changeAvatar(java.lang.String)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/orders/getUser]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.OrdersController.getUser(java.lang.Long)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/orders/regist]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.OrdersController.regist(cn.hu.system.domain.User)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/orders/csv]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.OrdersController.userCsv(cn.hu.system.domain.User)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/orders/update]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.OrdersController.updateUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/orders/delete]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.OrdersController.deleteUsers(java.lang.String)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/orders/checkPassword]}" onto public boolean cn.hu.system.controller.OrdersController.checkPassword(java.lang.String)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/rebate]}" onto public java.lang.String cn.hu.system.controller.RebateController.index(org.springframework.ui.Model)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/rebate/updateUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RebateController.updateUserProfile(cn.hu.system.domain.User)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/rebate/list]}" onto public java.util.Map<java.lang.String, java.lang.Object> cn.hu.system.controller.RebateController.userList(cn.hu.common.domain.QueryRequest,cn.hu.system.domain.User)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/rebate/add]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RebateController.addUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/rebate/theme]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RebateController.updateTheme(cn.hu.system.domain.User)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/rebate/checkUserName]}" onto public boolean cn.hu.system.controller.RebateController.checkUserName(java.lang.String,java.lang.String)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/rebate/profile]}" onto public java.lang.String cn.hu.system.controller.RebateController.profileIndex(org.springframework.ui.Model)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/rebate/updatePassword]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RebateController.updatePassword(java.lang.String)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/rebate/excel]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RebateController.userExcel(cn.hu.system.domain.User)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/rebate/getUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RebateController.getUserProfile(java.lang.Long)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/rebate/changeAvatar]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RebateController.changeAvatar(java.lang.String)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/rebate/getUser]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RebateController.getUser(java.lang.Long)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/rebate/regist]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RebateController.regist(cn.hu.system.domain.User)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/rebate/csv]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RebateController.userCsv(cn.hu.system.domain.User)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/rebate/update]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RebateController.updateUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/rebate/delete]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RebateController.deleteUsers(java.lang.String)
20:44:35.057 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/rebate/checkPassword]}" onto public boolean cn.hu.system.controller.RebateController.checkPassword(java.lang.String)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/receive]}" onto public java.lang.String cn.hu.system.controller.ReceiveController.index(org.springframework.ui.Model)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/receive/updateUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.ReceiveController.updateUserProfile(cn.hu.system.domain.User)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/receive/list]}" onto public java.util.Map<java.lang.String, java.lang.Object> cn.hu.system.controller.ReceiveController.userList(cn.hu.common.domain.QueryRequest,cn.hu.system.domain.User)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/receive/add]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.ReceiveController.addUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/receive/theme]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.ReceiveController.updateTheme(cn.hu.system.domain.User)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/receive/checkUserName]}" onto public boolean cn.hu.system.controller.ReceiveController.checkUserName(java.lang.String,java.lang.String)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/receive/profile]}" onto public java.lang.String cn.hu.system.controller.ReceiveController.profileIndex(org.springframework.ui.Model)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/receive/updatePassword]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.ReceiveController.updatePassword(java.lang.String)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/receive/excel]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.ReceiveController.userExcel(cn.hu.system.domain.User)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/receive/getUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.ReceiveController.getUserProfile(java.lang.Long)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/receive/changeAvatar]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.ReceiveController.changeAvatar(java.lang.String)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/receive/getUser]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.ReceiveController.getUser(java.lang.Long)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/receive/regist]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.ReceiveController.regist(cn.hu.system.domain.User)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/receive/csv]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.ReceiveController.userCsv(cn.hu.system.domain.User)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/receive/update]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.ReceiveController.updateUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/receive/delete]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.ReceiveController.deleteUsers(java.lang.String)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/receive/checkPassword]}" onto public boolean cn.hu.system.controller.ReceiveController.checkPassword(java.lang.String)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/recharge]}" onto public java.lang.String cn.hu.system.controller.RechargeController.index(org.springframework.ui.Model)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/recharge/updateUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RechargeController.updateUserProfile(cn.hu.system.domain.User)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/recharge/list]}" onto public java.util.Map<java.lang.String, java.lang.Object> cn.hu.system.controller.RechargeController.userList(cn.hu.common.domain.QueryRequest,cn.hu.system.domain.User)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/recharge/add]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RechargeController.addUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/recharge/theme]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RechargeController.updateTheme(cn.hu.system.domain.User)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/recharge/checkUserName]}" onto public boolean cn.hu.system.controller.RechargeController.checkUserName(java.lang.String,java.lang.String)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/recharge/profile]}" onto public java.lang.String cn.hu.system.controller.RechargeController.profileIndex(org.springframework.ui.Model)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/recharge/updatePassword]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RechargeController.updatePassword(java.lang.String)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/recharge/excel]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RechargeController.userExcel(cn.hu.system.domain.User)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/recharge/getUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RechargeController.getUserProfile(java.lang.Long)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/recharge/changeAvatar]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RechargeController.changeAvatar(java.lang.String)
20:44:35.072 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/recharge/getUser]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RechargeController.getUser(java.lang.Long)
20:44:35.104 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/recharge/regist]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RechargeController.regist(cn.hu.system.domain.User)
20:44:35.104 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/recharge/csv]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RechargeController.userCsv(cn.hu.system.domain.User)
20:44:35.104 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/recharge/update]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RechargeController.updateUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.104 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/recharge/delete]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RechargeController.deleteUsers(java.lang.String)
20:44:35.104 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/recharge/checkPassword]}" onto public boolean cn.hu.system.controller.RechargeController.checkPassword(java.lang.String)
20:44:35.104 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/redis/get]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RedisController.get(java.lang.String)
20:44:35.104 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/redis/keys]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RedisController.keys(java.lang.String)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/redis/set]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RedisController.set(java.lang.String)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/redis/exists]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RedisController.exists(java.lang.String)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/redis/del]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RedisController.del(java.lang.String)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/redis/terminal]}" onto public java.lang.String cn.hu.system.controller.RedisController.redisTerminal(org.springframework.ui.Model)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/redis/info]}" onto public java.lang.String cn.hu.system.controller.RedisController.getRedisInfo(org.springframework.ui.Model)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/redis/memoryInfo]}" onto public java.lang.String cn.hu.system.controller.RedisController.getMemoryInfo()
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/redis/pttl]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RedisController.pttl(java.lang.String)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/redis/pexpire]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RedisController.pexpire(java.lang.String)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/redis/keysSize]}" onto public java.lang.String cn.hu.system.controller.RedisController.getKeysSize()
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/role]}" onto public java.lang.String cn.hu.system.controller.RoleController.index()
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/role/getRole]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RoleController.getRole(java.lang.Long)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/role/add]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RoleController.addRole(cn.hu.system.domain.Role,java.lang.Long[])
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/role/update]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RoleController.updateRole(cn.hu.system.domain.Role,java.lang.Long[])
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/role/checkRoleName]}" onto public boolean cn.hu.system.controller.RoleController.checkRoleName(java.lang.String,java.lang.String)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/role/csv]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RoleController.roleCsv(cn.hu.system.domain.Role)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/role/delete]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RoleController.deleteRoles(java.lang.String)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/role/excel]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.RoleController.roleExcel(cn.hu.system.domain.Role)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/role/list]}" onto public java.util.Map<java.lang.String, java.lang.Object> cn.hu.system.controller.RoleController.roleList(cn.hu.common.domain.QueryRequest,cn.hu.system.domain.Role)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/session/list]}" onto public java.util.Map<java.lang.String, java.lang.Object> cn.hu.system.controller.SessionController.list()
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/session/forceLogout]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.SessionController.forceLogout(java.lang.String)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/session]}" onto public java.lang.String cn.hu.system.controller.SessionController.online()
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/statistics]}" onto public java.lang.String cn.hu.system.controller.StatisticsController.index(org.springframework.ui.Model)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/statistics/updateUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StatisticsController.updateUserProfile(cn.hu.system.domain.User)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/statistics/list]}" onto public java.util.Map<java.lang.String, java.lang.Object> cn.hu.system.controller.StatisticsController.userList(cn.hu.common.domain.QueryRequest,cn.hu.system.domain.User)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/statistics/add]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StatisticsController.addUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/statistics/theme]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StatisticsController.updateTheme(cn.hu.system.domain.User)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/statistics/checkUserName]}" onto public boolean cn.hu.system.controller.StatisticsController.checkUserName(java.lang.String,java.lang.String)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/statistics/profile]}" onto public java.lang.String cn.hu.system.controller.StatisticsController.profileIndex(org.springframework.ui.Model)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/statistics/updatePassword]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StatisticsController.updatePassword(java.lang.String)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/statistics/excel]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StatisticsController.userExcel(cn.hu.system.domain.User)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/statistics/getUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StatisticsController.getUserProfile(java.lang.Long)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/statistics/changeAvatar]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StatisticsController.changeAvatar(java.lang.String)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/statistics/getUser]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StatisticsController.getUser(java.lang.Long)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/statistics/regist]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StatisticsController.regist(cn.hu.system.domain.User)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/statistics/csv]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StatisticsController.userCsv(cn.hu.system.domain.User)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/statistics/update]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StatisticsController.updateUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/statistics/delete]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StatisticsController.deleteUsers(java.lang.String)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/statistics/checkPassword]}" onto public boolean cn.hu.system.controller.StatisticsController.checkPassword(java.lang.String)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/storage]}" onto public java.lang.String cn.hu.system.controller.StorageController.index(org.springframework.ui.Model)
20:44:35.119 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/storage/updateUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StorageController.updateUserProfile(cn.hu.system.domain.User)
20:44:35.135 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/storage/list]}" onto public java.util.Map<java.lang.String, java.lang.Object> cn.hu.system.controller.StorageController.userList(cn.hu.common.domain.QueryRequest,cn.hu.system.domain.User)
20:44:35.135 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/storage/add]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StorageController.addUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.135 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/storage/theme]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StorageController.updateTheme(cn.hu.system.domain.User)
20:44:35.135 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/storage/checkUserName]}" onto public boolean cn.hu.system.controller.StorageController.checkUserName(java.lang.String,java.lang.String)
20:44:35.135 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/storage/profile]}" onto public java.lang.String cn.hu.system.controller.StorageController.profileIndex(org.springframework.ui.Model)
20:44:35.136 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/storage/updatePassword]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StorageController.updatePassword(java.lang.String)
20:44:35.136 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/storage/excel]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StorageController.userExcel(cn.hu.system.domain.User)
20:44:35.136 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/storage/getUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StorageController.getUserProfile(java.lang.Long)
20:44:35.136 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/storage/changeAvatar]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StorageController.changeAvatar(java.lang.String)
20:44:35.136 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/storage/getUser]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StorageController.getUser(java.lang.Long)
20:44:35.136 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/storage/regist]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StorageController.regist(cn.hu.system.domain.User)
20:44:35.136 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/storage/csv]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StorageController.userCsv(cn.hu.system.domain.User)
20:44:35.136 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/storage/update]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StorageController.updateUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/storage/delete]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.StorageController.deleteUsers(java.lang.String)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/storage/checkPassword]}" onto public boolean cn.hu.system.controller.StorageController.checkPassword(java.lang.String)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/talent]}" onto public java.lang.String cn.hu.system.controller.TalentController.index(org.springframework.ui.Model)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/talent/updateUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.TalentController.updateUserProfile(cn.hu.system.domain.User)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/talent/list]}" onto public java.util.Map<java.lang.String, java.lang.Object> cn.hu.system.controller.TalentController.userList(cn.hu.common.domain.QueryRequest,cn.hu.system.domain.User)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/talent/add]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.TalentController.addUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/talent/theme]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.TalentController.updateTheme(cn.hu.system.domain.User)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/talent/checkUserName]}" onto public boolean cn.hu.system.controller.TalentController.checkUserName(java.lang.String,java.lang.String)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/talent/profile]}" onto public java.lang.String cn.hu.system.controller.TalentController.profileIndex(org.springframework.ui.Model)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/talent/updatePassword]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.TalentController.updatePassword(java.lang.String)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/talent/excel]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.TalentController.userExcel(cn.hu.system.domain.User)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/talent/getUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.TalentController.getUserProfile(java.lang.Long)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/talent/changeAvatar]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.TalentController.changeAvatar(java.lang.String)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/talent/getUser]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.TalentController.getUser(java.lang.Long)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/talent/regist]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.TalentController.regist(cn.hu.system.domain.User)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/talent/csv]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.TalentController.userCsv(cn.hu.system.domain.User)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/talent/update]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.TalentController.updateUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/talent/delete]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.TalentController.deleteUsers(java.lang.String)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/talent/checkPassword]}" onto public boolean cn.hu.system.controller.TalentController.checkPassword(java.lang.String)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/withdraw]}" onto public java.lang.String cn.hu.system.controller.WithDrawController.index(org.springframework.ui.Model)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/withdraw/updateUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.WithDrawController.updateUserProfile(cn.hu.system.domain.User)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/withdraw/list]}" onto public java.util.Map<java.lang.String, java.lang.Object> cn.hu.system.controller.WithDrawController.userList(cn.hu.common.domain.QueryRequest,cn.hu.system.domain.User)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/withdraw/add]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.WithDrawController.addUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/withdraw/theme]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.WithDrawController.updateTheme(cn.hu.system.domain.User)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/withdraw/checkUserName]}" onto public boolean cn.hu.system.controller.WithDrawController.checkUserName(java.lang.String,java.lang.String)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/withdraw/profile]}" onto public java.lang.String cn.hu.system.controller.WithDrawController.profileIndex(org.springframework.ui.Model)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/withdraw/updatePassword]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.WithDrawController.updatePassword(java.lang.String)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/withdraw/excel]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.WithDrawController.userExcel(cn.hu.system.domain.User)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/withdraw/getUserProfile]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.WithDrawController.getUserProfile(java.lang.Long)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/withdraw/changeAvatar]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.WithDrawController.changeAvatar(java.lang.String)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/withdraw/getUser]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.WithDrawController.getUser(java.lang.Long)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/withdraw/regist]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.WithDrawController.regist(cn.hu.system.domain.User)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/withdraw/csv]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.WithDrawController.userCsv(cn.hu.system.domain.User)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/withdraw/update]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.WithDrawController.updateUser(cn.hu.system.domain.User,java.lang.Long[])
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/withdraw/delete]}" onto public cn.hu.common.domain.ResponseBo cn.hu.system.controller.WithDrawController.deleteUsers(java.lang.String)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/withdraw/checkPassword]}" onto public boolean cn.hu.system.controller.WithDrawController.checkPassword(java.lang.String)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/article]}" onto public java.lang.String cn.hu.web.controller.ArticleController.index()
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/article/query]}" onto public cn.hu.common.domain.ResponseBo cn.hu.web.controller.ArticleController.queryArticle(java.lang.String)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/movie/detail]}" onto public cn.hu.common.domain.ResponseBo cn.hu.web.controller.MovieController.getDetail(java.lang.String)
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/movie/getMovieHot]}" onto public cn.hu.common.domain.ResponseBo cn.hu.web.controller.MovieController.getMoiveHot()
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/movie/coming]}" onto public java.lang.String cn.hu.web.controller.MovieController.movieComing()
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/movie/getMovieComing]}" onto public cn.hu.common.domain.ResponseBo cn.hu.web.controller.MovieController.getMovieComing()
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/movie/hot]}" onto public java.lang.String cn.hu.web.controller.MovieController.movieHot()
20:44:35.137 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/movie/comments]}" onto public cn.hu.common.domain.ResponseBo cn.hu.web.controller.MovieController.getComments(java.lang.String)
20:44:35.153 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/one/painting]}" onto public java.lang.String cn.hu.web.controller.OneIsAllController.paintIndex()
20:44:35.153 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/one/oneList]}" onto public cn.hu.common.domain.ResponseBo cn.hu.web.controller.OneIsAllController.getOneList()
20:44:35.153 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/one/readingList]}" onto public cn.hu.common.domain.ResponseBo cn.hu.web.controller.OneIsAllController.getReadingList()
20:44:35.153 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/one/yuwen]}" onto public java.lang.String cn.hu.web.controller.OneIsAllController.yuwenIndex()
20:44:35.153 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/one/yuwenDetail]}" onto public cn.hu.common.domain.ResponseBo cn.hu.web.controller.OneIsAllController.getYuwenDetail(java.lang.String,java.lang.String)
20:44:35.153 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/one/essay]}" onto public java.lang.String cn.hu.web.controller.OneIsAllController.essayIndex()
20:44:35.153 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/one/essayComments]}" onto public cn.hu.common.domain.ResponseBo cn.hu.web.controller.OneIsAllController.getEssayComments(java.lang.String)
20:44:35.153 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/one/essayDetail]}" onto public cn.hu.common.domain.ResponseBo cn.hu.web.controller.OneIsAllController.getEssayDetail(java.lang.String,java.lang.String)
20:44:35.153 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/one/yuwenComments]}" onto public cn.hu.common.domain.ResponseBo cn.hu.web.controller.OneIsAllController.getYuwenComments(java.lang.String)
20:44:35.153 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/weather/query]}" onto public cn.hu.common.domain.ResponseBo cn.hu.web.controller.WeatherController.queryWeather(java.lang.String)
20:44:35.153 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/weather]}" onto public java.lang.String cn.hu.web.controller.WeatherController.weather()
20:44:35.169 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
20:44:35.169 febs [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
20:44:35.262 febs [main] INFO  o.s.w.s.h.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
20:44:35.262 febs [main] INFO  o.s.w.s.h.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
20:44:35.325 febs [main] INFO  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Detected @ExceptionHandler methods in globalExceptionHandler
20:44:35.606 febs [main] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page template: index
20:44:37.159 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Using default implementation for ThreadExecutor
20:44:37.183 febs [main] INFO  o.quartz.core.SchedulerSignalerImpl - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
20:44:37.183 febs [main] INFO  org.quartz.core.QuartzScheduler - Quartz Scheduler v.2.3.0 created.
20:44:37.183 febs [main] INFO  org.quartz.simpl.RAMJobStore - RAMJobStore initialized.
20:44:37.183 febs [main] INFO  org.quartz.core.QuartzScheduler - Scheduler meta-data: Quartz Scheduler (v2.3.0) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

20:44:37.183 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
20:44:37.183 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler version: 2.3.0
20:44:37.183 febs [main] INFO  org.quartz.core.QuartzScheduler - JobFactory set to: org.springframework.boot.autoconfigure.quartz.AutowireCapableBeanJobFactory@451816fd
20:44:37.886 febs [main] INFO  o.s.j.e.a.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
20:44:37.886 febs [main] INFO  o.s.j.e.a.AnnotationMBeanExporter - Bean with name 'statFilter' has been autodetected for JMX exposure
20:44:37.886 febs [main] INFO  o.s.j.e.a.AnnotationMBeanExporter - Bean with name 'dataSource' has been autodetected for JMX exposure
20:44:37.886 febs [main] INFO  o.s.j.e.a.AnnotationMBeanExporter - Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.spring.boot.autoconfigure:name=dataSource,type=DruidDataSourceWrapper]
20:44:37.886 febs [main] INFO  o.s.j.e.a.AnnotationMBeanExporter - Located MBean 'statFilter': registering with JMX server as MBean [com.alibaba.druid.filter.stat:name=statFilter,type=StatFilter]
20:44:37.902 febs [main] INFO  o.s.c.s.DefaultLifecycleProcessor - Starting beans in phase 2147483647
20:44:37.902 febs [main] INFO  o.s.s.quartz.SchedulerFactoryBean - Starting Quartz Scheduler now
20:44:37.902 febs [main] INFO  org.quartz.core.QuartzScheduler - Scheduler quartzScheduler_$_NON_CLUSTERED started.
20:44:37.902 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
20:44:37.933 febs [main] INFO  o.a.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
20:44:37.964 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
20:44:37.964 febs [main] INFO  cn.hu.Application - Started Application in 15.253 seconds (JVM running for 16.018)
20:44:37.980 febs [main] INFO  cn.hu.Application - 《《《《《《 started up successfully at 2019-02-16 20:44:37.980 》》》》》》
20:44:55.152 febs [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
20:44:55.152 febs [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
20:44:55.213 febs [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 61 ms
20:44:55.262 febs [http-nio-8080-exec-1] INFO  o.a.s.s.m.AbstractValidatingSessionManager - Enabling session validation scheduler...
20:45:04.437 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.UserMapper.selectByExample
20:45:04.437 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 51 ms
20:45:04.437 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT USER_ID,USERNAME,PASSWORD,DEPT_ID,FRONT,BACK,EMAIL,MOBILE,STATUS,CRATE_TIME,MODIFY_TIME,LAST_LOGIN_TIME,SSEX,THEME,AVATAR,DESCRIPTION FROM t_user WHERE ( lower(username)= 'admin' )
20:45:05.011 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.UserMapper.updateByExampleSelective
20:45:05.011 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 8 ms
20:45:05.011 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> UPDATE t_user SET STATUS = '1',LAST_LOGIN_TIME = '2019-2-16 20:45:05' WHERE ( lower(username)= 'admin' )
20:45:05.411 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
20:45:05.411 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 13 ms
20:45:05.411 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1912,'admin','访问系统',1,'cn.hu.system.controller.LoginController.index()','user: "User [userId=4, username=admin, password=13bfb9844ba36ac930ba142d8c3db629, deptId=5, deptName=null, front=11, back=222, email=googlebrain@163.com, mobile=17600313199, status=1, crateTime=Sun Jan 27 23:47:19 CST 2019, modifyTime=Sun Jan 27 23:55:12 CST 2019, lastLoginTime=Thu Feb 14 22:56:38 CST 2019, ssex=0, theme=green, avatar=20180414165855.jpg, description=天下为公, roleName=null]"  org.springframework.validation.BindingResult.user: "org.springframework.validation.BeanPropertyBindingResult: 0 errors"','127.0.0.1','2019-2-16 20:45:05','内网IP|0|0|内网IP|内网IP' )
20:45:07.040 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.MenuMapper.findUserMenus
20:45:07.041 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 31 ms
20:45:07.041 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on(rm.role_id = r.role_id) left join t_user_role ur on(ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.create_time
20:45:15.389 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
20:45:15.389 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 6 ms
20:45:15.389 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1913,'admin','访问系统',0,'cn.hu.system.controller.LoginController.index()','user: "User [userId=4, username=admin, password=13bfb9844ba36ac930ba142d8c3db629, deptId=5, deptName=null, front=11, back=222, email=googlebrain@163.com, mobile=17600313199, status=1, crateTime=Sun Jan 27 23:47:19 CST 2019, modifyTime=Sun Jan 27 23:55:12 CST 2019, lastLoginTime=Thu Feb 14 22:56:38 CST 2019, ssex=0, theme=green, avatar=20180414165855.jpg, description=天下为公, roleName=null]"  org.springframework.validation.BindingResult.user: "org.springframework.validation.BeanPropertyBindingResult: 0 errors"','127.0.0.1','2019-2-16 20:45:15','内网IP|0|0|内网IP|内网IP' )
20:45:16.007 febs [http-nio-8080-exec-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.MenuMapper.findUserMenus
20:45:16.007 febs [http-nio-8080-exec-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 12 ms
20:45:16.007 febs [http-nio-8080-exec-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on(rm.role_id = r.role_id) left join t_user_role ur on(ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.create_time
20:45:34.603 febs [http-nio-8080-exec-9] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.findUserRole
20:45:34.603 febs [http-nio-8080-exec-9] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
20:45:34.603 febs [http-nio-8080-exec-9] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select r.* from t_role r left join t_user_role ur on(r.role_id = ur.role_id) left join t_user u on(u.user_id = ur.user_id) where u.username = 'admin'
20:45:34.611 febs [http-nio-8080-exec-9] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.MenuMapper.findUserPermissions
20:45:34.611 febs [http-nio-8080-exec-9] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 6 ms
20:45:34.611 febs [http-nio-8080-exec-9] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select m.perms from t_role r left join t_user_role ur on(r.role_id = ur.role_id) left join t_user u on(u.user_id = ur.user_id) left join t_role_menu rm on(rm.role_id = r.role_id) left join t_menu m on(m.menu_id = rm.menu_id ) where u.username = 'admin' and m.perms is not null and m.perms <> ''
20:46:04.844 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.DeptMapper.selectByExample
20:46:04.844 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 7 ms
20:46:04.844 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT DEPT_ID,PARENT_ID,DEPT_NAME,ORDER_NUM,CREATE_TIME FROM t_dept order by dept_id
20:46:05.007 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample_COUNT
20:46:05.007 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
20:46:05.007 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
20:46:05.010 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample
20:46:05.010 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
20:46:05.010 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
20:46:05.525 febs [asyncTaskExecutor-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
20:46:05.526 febs [asyncTaskExecutor-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 3 ms
20:46:05.526 febs [asyncTaskExecutor-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1914,'admin','获取用户信息',219,'cn.hu.system.controller.TalentController.userList()','request: "QueryRequest{pageSize=10, pageNum=1}"  user: "User [userId=null, username=, password=null, deptId=null, deptName=null, front=null, back=null, email=null, mobile=null, status=, crateTime=null, modifyTime=null, lastLoginTime=null, ssex=null, theme=null, avatar=null, description=null, roleName=null]"','127.0.0.1','2019-2-16 20:46:05','内网IP|0|0|内网IP|内网IP' )
20:51:46.479 febs [asyncTaskExecutor-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
20:51:46.480 febs [asyncTaskExecutor-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 10 ms
20:51:46.480 febs [asyncTaskExecutor-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1915,'admin','访问系统',1,'cn.hu.system.controller.LoginController.index()','user: "User [userId=4, username=admin, password=13bfb9844ba36ac930ba142d8c3db629, deptId=5, deptName=null, front=11, back=222, email=googlebrain@163.com, mobile=17600313199, status=1, crateTime=Sun Jan 27 23:47:19 CST 2019, modifyTime=Sun Jan 27 23:55:12 CST 2019, lastLoginTime=Thu Feb 14 22:56:38 CST 2019, ssex=0, theme=green, avatar=20180414165855.jpg, description=天下为公, roleName=null]"  org.springframework.validation.BindingResult.user: "org.springframework.validation.BeanPropertyBindingResult: 0 errors"','127.0.0.1','2019-2-16 20:51:46','内网IP|0|0|内网IP|内网IP' )
20:51:48.713 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.MenuMapper.findUserMenus
20:51:48.714 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 17 ms
20:51:48.714 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on(rm.role_id = r.role_id) left join t_user_role ur on(ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.create_time
20:51:58.389 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.DeptMapper.selectByExample
20:51:58.389 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 8 ms
20:51:58.389 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT DEPT_ID,PARENT_ID,DEPT_NAME,ORDER_NUM,CREATE_TIME FROM t_dept order by dept_id
20:51:58.554 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample_COUNT
20:51:58.554 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
20:51:58.554 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
20:51:58.557 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample
20:51:58.557 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 3 ms
20:51:58.557 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
20:51:59.169 febs [asyncTaskExecutor-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
20:51:59.170 febs [asyncTaskExecutor-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 5 ms
20:51:59.170 febs [asyncTaskExecutor-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1916,'admin','获取用户信息',247,'cn.hu.system.controller.TalentController.userList()','request: "QueryRequest{pageSize=10, pageNum=1}"  user: "User [userId=null, username=, password=null, deptId=null, deptName=null, front=null, back=null, email=null, mobile=null, status=, crateTime=null, modifyTime=null, lastLoginTime=null, ssex=null, theme=null, avatar=null, description=null, roleName=null]"','127.0.0.1','2019-2-16 20:51:59','内网IP|0|0|内网IP|内网IP' )
20:52:35.444 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
20:52:35.444 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 5 ms
20:52:35.444 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1917,'admin','访问系统',0,'cn.hu.system.controller.LoginController.index()','user: "User [userId=4, username=admin, password=13bfb9844ba36ac930ba142d8c3db629, deptId=5, deptName=null, front=11, back=222, email=googlebrain@163.com, mobile=17600313199, status=1, crateTime=Sun Jan 27 23:47:19 CST 2019, modifyTime=Sun Jan 27 23:55:12 CST 2019, lastLoginTime=Thu Feb 14 22:56:38 CST 2019, ssex=0, theme=green, avatar=20180414165855.jpg, description=天下为公, roleName=null]"  org.springframework.validation.BindingResult.user: "org.springframework.validation.BeanPropertyBindingResult: 0 errors"','127.0.0.1','2019-2-16 20:52:35','内网IP|0|0|内网IP|内网IP' )
20:52:36.169 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.MenuMapper.findUserMenus
20:52:36.169 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 15 ms
20:52:36.169 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on(rm.role_id = r.role_id) left join t_user_role ur on(ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.create_time
20:52:40.467 febs [http-nio-8080-exec-9] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.DeptMapper.selectByExample
20:52:40.468 febs [http-nio-8080-exec-9] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 3 ms
20:52:40.468 febs [http-nio-8080-exec-9] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT DEPT_ID,PARENT_ID,DEPT_NAME,ORDER_NUM,CREATE_TIME FROM t_dept order by dept_id
20:52:40.615 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample_COUNT
20:52:40.615 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
20:52:40.615 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
20:52:40.618 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample
20:52:40.618 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
20:52:40.618 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
20:52:41.523 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
20:52:41.523 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 10 ms
20:52:41.523 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1918,'admin','获取用户信息',66,'cn.hu.system.controller.TalentController.userList()','request: "QueryRequest{pageSize=10, pageNum=1}"  user: "User [userId=null, username=, password=null, deptId=null, deptName=null, front=null, back=null, email=null, mobile=null, status=, crateTime=null, modifyTime=null, lastLoginTime=null, ssex=null, theme=null, avatar=null, description=null, roleName=null]"','127.0.0.1','2019-2-16 20:52:41','内网IP|0|0|内网IP|内网IP' )
20:53:42.854 febs [asyncTaskExecutor-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
20:53:42.854 febs [asyncTaskExecutor-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 5 ms
20:53:42.854 febs [asyncTaskExecutor-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1919,'admin','访问系统',0,'cn.hu.system.controller.LoginController.index()','user: "User [userId=4, username=admin, password=13bfb9844ba36ac930ba142d8c3db629, deptId=5, deptName=null, front=11, back=222, email=googlebrain@163.com, mobile=17600313199, status=1, crateTime=Sun Jan 27 23:47:19 CST 2019, modifyTime=Sun Jan 27 23:55:12 CST 2019, lastLoginTime=Thu Feb 14 22:56:38 CST 2019, ssex=0, theme=green, avatar=20180414165855.jpg, description=天下为公, roleName=null]"  org.springframework.validation.BindingResult.user: "org.springframework.validation.BeanPropertyBindingResult: 0 errors"','127.0.0.1','2019-2-16 20:53:42','内网IP|0|0|内网IP|内网IP' )
20:53:46.189 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.MenuMapper.findUserMenus
20:53:46.190 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 20 ms
20:53:46.190 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on(rm.role_id = r.role_id) left join t_user_role ur on(ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.create_time
20:53:50.062 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.DeptMapper.selectByExample
20:53:50.062 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 3 ms
20:53:50.062 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT DEPT_ID,PARENT_ID,DEPT_NAME,ORDER_NUM,CREATE_TIME FROM t_dept order by dept_id
20:53:50.253 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample_COUNT
20:53:50.253 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
20:53:50.253 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
20:53:50.255 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample
20:53:50.255 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
20:53:50.255 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
20:53:50.584 febs [asyncTaskExecutor-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
20:53:50.584 febs [asyncTaskExecutor-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 8 ms
20:53:50.584 febs [asyncTaskExecutor-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1920,'admin','获取用户信息',84,'cn.hu.system.controller.TalentController.userList()','request: "QueryRequest{pageSize=10, pageNum=1}"  user: "User [userId=null, username=, password=null, deptId=null, deptName=null, front=null, back=null, email=null, mobile=null, status=, crateTime=null, modifyTime=null, lastLoginTime=null, ssex=null, theme=null, avatar=null, description=null, roleName=null]"','127.0.0.1','2019-2-16 20:53:50','内网IP|0|0|内网IP|内网IP' )
20:54:22.992 febs [http-nio-8080-exec-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.UserMapper.findUserWithRole
20:54:22.992 febs [http-nio-8080-exec-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 5 ms
20:54:22.992 febs [http-nio-8080-exec-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select u.user_id userId,u.username,u.dept_id deptId,u.email,u.mobile, u.status,u.ssex,ur.role_id roleId from t_user u left join t_user_role ur on (u.user_id = ur.user_id) where u.user_id = 4
20:57:46.725 febs [asyncTaskExecutor-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
20:57:46.726 febs [asyncTaskExecutor-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 12 ms
20:57:46.726 febs [asyncTaskExecutor-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1921,'admin','访问系统',0,'cn.hu.system.controller.LoginController.index()','user: "User [userId=4, username=admin, password=13bfb9844ba36ac930ba142d8c3db629, deptId=5, deptName=null, front=11, back=222, email=googlebrain@163.com, mobile=17600313199, status=1, crateTime=Sun Jan 27 23:47:19 CST 2019, modifyTime=Sun Jan 27 23:55:12 CST 2019, lastLoginTime=Thu Feb 14 22:56:38 CST 2019, ssex=0, theme=green, avatar=20180414165855.jpg, description=天下为公, roleName=null]"  org.springframework.validation.BindingResult.user: "org.springframework.validation.BeanPropertyBindingResult: 0 errors"','127.0.0.1','2019-2-16 20:57:46','内网IP|0|0|内网IP|内网IP' )
20:57:48.343 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.MenuMapper.findUserMenus
20:57:48.343 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 19 ms
20:57:48.343 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on(rm.role_id = r.role_id) left join t_user_role ur on(ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.create_time
20:57:52.634 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.DeptMapper.selectByExample
20:57:52.634 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
20:57:52.634 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT DEPT_ID,PARENT_ID,DEPT_NAME,ORDER_NUM,CREATE_TIME FROM t_dept order by dept_id
20:57:52.789 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample_COUNT
20:57:52.789 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
20:57:52.789 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
20:57:52.791 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample
20:57:52.792 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
20:57:52.792 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
20:57:53.252 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
20:57:53.252 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 7 ms
20:57:53.252 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1922,'admin','获取用户信息',156,'cn.hu.system.controller.TalentController.userList()','request: "QueryRequest{pageSize=10, pageNum=1}"  user: "User [userId=null, username=, password=null, deptId=null, deptName=null, front=null, back=null, email=null, mobile=null, status=, crateTime=null, modifyTime=null, lastLoginTime=null, ssex=null, theme=null, avatar=null, description=null, roleName=null]"','127.0.0.1','2019-2-16 20:57:53','内网IP|0|0|内网IP|内网IP' )
20:57:56.249 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.UserMapper.findUserWithRole
20:57:56.249 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
20:57:56.249 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select u.user_id userId,u.username,u.dept_id deptId,u.email,u.mobile, u.status,u.ssex,ur.role_id roleId from t_user u left join t_user_role ur on (u.user_id = ur.user_id) where u.user_id = 4
21:11:42.028 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:11:42.029 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 15 ms
21:11:42.029 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1923,'admin','访问系统',0,'cn.hu.system.controller.LoginController.index()','user: "User [userId=4, username=admin, password=13bfb9844ba36ac930ba142d8c3db629, deptId=5, deptName=null, front=11, back=222, email=googlebrain@163.com, mobile=17600313199, status=1, crateTime=Sun Jan 27 23:47:19 CST 2019, modifyTime=Sun Jan 27 23:55:12 CST 2019, lastLoginTime=Thu Feb 14 22:56:38 CST 2019, ssex=0, theme=green, avatar=20180414165855.jpg, description=天下为公, roleName=null]"  org.springframework.validation.BindingResult.user: "org.springframework.validation.BeanPropertyBindingResult: 0 errors"','127.0.0.1','2019-2-16 21:11:42','内网IP|0|0|内网IP|内网IP' )
21:11:45.039 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.MenuMapper.findUserMenus
21:11:45.039 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 19 ms
21:11:45.039 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on(rm.role_id = r.role_id) left join t_user_role ur on(ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.create_time
21:11:52.474 febs [http-nio-8080-exec-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.DeptMapper.selectByExample
21:11:52.474 febs [http-nio-8080-exec-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 3 ms
21:11:52.474 febs [http-nio-8080-exec-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT DEPT_ID,PARENT_ID,DEPT_NAME,ORDER_NUM,CREATE_TIME FROM t_dept order by dept_id
21:11:52.527 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample_COUNT
21:11:52.527 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
21:11:52.527 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:11:52.530 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample
21:11:52.530 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
21:11:52.530 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:11:53.056 febs [asyncTaskExecutor-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:11:53.056 febs [asyncTaskExecutor-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 4 ms
21:11:53.056 febs [asyncTaskExecutor-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1924,'admin','获取用户信息',229,'cn.hu.system.controller.TalentController.userList()','request: "QueryRequest{pageSize=10, pageNum=1}"  user: "User [userId=null, username=, password=null, deptId=null, deptName=null, front=null, back=null, email=null, mobile=null, status=, crateTime=null, modifyTime=null, lastLoginTime=null, ssex=null, theme=null, avatar=null, description=null, roleName=null]"','127.0.0.1','2019-2-16 21:11:53','内网IP|0|0|内网IP|内网IP' )
21:11:54.197 febs [http-nio-8080-exec-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.DeptMapper.selectByExample
21:11:54.197 febs [http-nio-8080-exec-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
21:11:54.197 febs [http-nio-8080-exec-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT DEPT_ID,PARENT_ID,DEPT_NAME,ORDER_NUM,CREATE_TIME FROM t_dept order by dept_id
21:11:54.327 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample_COUNT
21:11:54.327 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
21:11:54.327 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:11:54.329 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample
21:11:54.329 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
21:11:54.329 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:11:54.610 febs [asyncTaskExecutor-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:11:54.610 febs [asyncTaskExecutor-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 5 ms
21:11:54.610 febs [asyncTaskExecutor-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1925,'admin','获取用户信息',67,'cn.hu.system.controller.TalentController.userList()','request: "QueryRequest{pageSize=10, pageNum=1}"  user: "User [userId=null, username=, password=null, deptId=null, deptName=null, front=null, back=null, email=null, mobile=null, status=, crateTime=null, modifyTime=null, lastLoginTime=null, ssex=null, theme=null, avatar=null, description=null, roleName=null]"','127.0.0.1','2019-2-16 21:11:54','内网IP|0|0|内网IP|内网IP' )
21:11:58.027 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.UserMapper.findUserWithRole
21:11:58.027 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
21:11:58.027 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select u.user_id userId,u.username,u.dept_id deptId,u.email,u.mobile, u.status,u.ssex,ur.role_id roleId from t_user u left join t_user_role ur on (u.user_id = ur.user_id) where u.user_id = 4
21:28:00.841 febs [asyncTaskExecutor-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:28:00.841 febs [asyncTaskExecutor-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 23 ms
21:28:00.841 febs [asyncTaskExecutor-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1926,'admin','访问系统',1,'cn.hu.system.controller.LoginController.index()','user: "User [userId=4, username=admin, password=13bfb9844ba36ac930ba142d8c3db629, deptId=5, deptName=null, front=11, back=222, email=googlebrain@163.com, mobile=17600313199, status=1, crateTime=Sun Jan 27 23:47:19 CST 2019, modifyTime=Sun Jan 27 23:55:12 CST 2019, lastLoginTime=Thu Feb 14 22:56:38 CST 2019, ssex=0, theme=green, avatar=20180414165855.jpg, description=天下为公, roleName=null]"  org.springframework.validation.BindingResult.user: "org.springframework.validation.BeanPropertyBindingResult: 0 errors"','127.0.0.1','2019-2-16 21:28:00','内网IP|0|0|内网IP|内网IP' )
21:28:04.610 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.MenuMapper.findUserMenus
21:28:04.610 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 14 ms
21:28:04.610 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on(rm.role_id = r.role_id) left join t_user_role ur on(ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.create_time
21:28:08.725 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.DeptMapper.selectByExample
21:28:08.725 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
21:28:08.725 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT DEPT_ID,PARENT_ID,DEPT_NAME,ORDER_NUM,CREATE_TIME FROM t_dept order by dept_id
21:28:08.879 febs [http-nio-8080-exec-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample_COUNT
21:28:08.879 febs [http-nio-8080-exec-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:28:08.879 febs [http-nio-8080-exec-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:28:08.882 febs [http-nio-8080-exec-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample
21:28:08.882 febs [http-nio-8080-exec-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 3 ms
21:28:08.882 febs [http-nio-8080-exec-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:28:09.338 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:28:09.338 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 5 ms
21:28:09.338 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1927,'admin','获取用户信息',227,'cn.hu.system.controller.TalentController.userList()','request: "QueryRequest{pageSize=10, pageNum=1}"  user: "User [userId=null, username=, password=null, deptId=null, deptName=null, front=null, back=null, email=null, mobile=null, status=, crateTime=null, modifyTime=null, lastLoginTime=null, ssex=null, theme=null, avatar=null, description=null, roleName=null]"','127.0.0.1','2019-2-16 21:28:09','内网IP|0|0|内网IP|内网IP' )
21:28:14.411 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.UserMapper.findUserWithRole
21:28:14.411 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 3 ms
21:28:14.411 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select u.user_id userId,u.username,u.dept_id deptId,u.email,u.mobile, u.status,u.ssex,ur.role_id roleId from t_user u left join t_user_role ur on (u.user_id = ur.user_id) where u.user_id = 4
21:29:02.697 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:29:02.697 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 9 ms
21:29:02.697 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1928,'admin','访问系统',0,'cn.hu.system.controller.LoginController.index()','user: "User [userId=4, username=admin, password=13bfb9844ba36ac930ba142d8c3db629, deptId=5, deptName=null, front=11, back=222, email=googlebrain@163.com, mobile=17600313199, status=1, crateTime=Sun Jan 27 23:47:19 CST 2019, modifyTime=Sun Jan 27 23:55:12 CST 2019, lastLoginTime=Thu Feb 14 22:56:38 CST 2019, ssex=0, theme=green, avatar=20180414165855.jpg, description=天下为公, roleName=null]"  org.springframework.validation.BindingResult.user: "org.springframework.validation.BeanPropertyBindingResult: 0 errors"','127.0.0.1','2019-2-16 21:29:02','内网IP|0|0|内网IP|内网IP' )
21:29:03.587 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.MenuMapper.findUserMenus
21:29:03.587 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 9 ms
21:29:03.587 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on(rm.role_id = r.role_id) left join t_user_role ur on(ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.create_time
21:29:09.266 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.DeptMapper.selectByExample
21:29:09.266 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:29:09.266 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT DEPT_ID,PARENT_ID,DEPT_NAME,ORDER_NUM,CREATE_TIME FROM t_dept order by dept_id
21:29:09.493 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample_COUNT
21:29:09.493 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:29:09.493 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:29:09.494 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample
21:29:09.494 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:29:09.494 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:29:10.009 febs [asyncTaskExecutor-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:29:10.010 febs [asyncTaskExecutor-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 6 ms
21:29:10.010 febs [asyncTaskExecutor-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1929,'admin','获取用户信息',125,'cn.hu.system.controller.TalentController.userList()','request: "QueryRequest{pageSize=10, pageNum=1}"  user: "User [userId=null, username=, password=null, deptId=null, deptName=null, front=null, back=null, email=null, mobile=null, status=, crateTime=null, modifyTime=null, lastLoginTime=null, ssex=null, theme=null, avatar=null, description=null, roleName=null]"','127.0.0.1','2019-2-16 21:29:10','内网IP|0|0|内网IP|内网IP' )
21:29:13.155 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.UserMapper.findUserWithRole
21:29:13.155 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:29:13.155 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select u.user_id userId,u.username,u.dept_id deptId,u.email,u.mobile, u.status,u.ssex,ur.role_id roleId from t_user u left join t_user_role ur on (u.user_id = ur.user_id) where u.user_id = 4
21:30:14.386 febs [asyncTaskExecutor-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:30:14.386 febs [asyncTaskExecutor-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 5 ms
21:30:14.386 febs [asyncTaskExecutor-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1930,'admin','访问系统',0,'cn.hu.system.controller.LoginController.index()','user: "User [userId=4, username=admin, password=13bfb9844ba36ac930ba142d8c3db629, deptId=5, deptName=null, front=11, back=222, email=googlebrain@163.com, mobile=17600313199, status=1, crateTime=Sun Jan 27 23:47:19 CST 2019, modifyTime=Sun Jan 27 23:55:12 CST 2019, lastLoginTime=Thu Feb 14 22:56:38 CST 2019, ssex=0, theme=green, avatar=20180414165855.jpg, description=天下为公, roleName=null]"  org.springframework.validation.BindingResult.user: "org.springframework.validation.BeanPropertyBindingResult: 0 errors"','127.0.0.1','2019-2-16 21:30:14','内网IP|0|0|内网IP|内网IP' )
21:30:15.344 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.MenuMapper.findUserMenus
21:30:15.344 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 13 ms
21:30:15.344 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on(rm.role_id = r.role_id) left join t_user_role ur on(ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.create_time
21:30:26.162 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.DeptMapper.selectByExample
21:30:26.163 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:30:26.163 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT DEPT_ID,PARENT_ID,DEPT_NAME,ORDER_NUM,CREATE_TIME FROM t_dept order by dept_id
21:30:26.495 febs [http-nio-8080-exec-9] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample_COUNT
21:30:26.495 febs [http-nio-8080-exec-9] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
21:30:26.495 febs [http-nio-8080-exec-9] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:30:26.496 febs [http-nio-8080-exec-9] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample
21:30:26.497 febs [http-nio-8080-exec-9] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:30:26.497 febs [http-nio-8080-exec-9] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:30:26.808 febs [asyncTaskExecutor-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:30:26.808 febs [asyncTaskExecutor-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 5 ms
21:30:26.808 febs [asyncTaskExecutor-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1931,'admin','获取用户信息',65,'cn.hu.system.controller.TalentController.userList()','request: "QueryRequest{pageSize=10, pageNum=1}"  user: "User [userId=null, username=, password=null, deptId=null, deptName=null, front=null, back=null, email=null, mobile=null, status=, crateTime=null, modifyTime=null, lastLoginTime=null, ssex=null, theme=null, avatar=null, description=null, roleName=null]"','127.0.0.1','2019-2-16 21:30:26','内网IP|0|0|内网IP|内网IP' )
21:30:31.162 febs [http-nio-8080-exec-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.UserMapper.findUserWithRole
21:30:31.163 febs [http-nio-8080-exec-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:30:31.163 febs [http-nio-8080-exec-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select u.user_id userId,u.username,u.dept_id deptId,u.email,u.mobile, u.status,u.ssex,ur.role_id roleId from t_user u left join t_user_role ur on (u.user_id = ur.user_id) where u.user_id = 4
21:35:30.674 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:35:30.674 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 11 ms
21:35:30.674 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1932,'admin','访问系统',0,'cn.hu.system.controller.LoginController.index()','user: "User [userId=4, username=admin, password=13bfb9844ba36ac930ba142d8c3db629, deptId=5, deptName=null, front=11, back=222, email=googlebrain@163.com, mobile=17600313199, status=1, crateTime=Sun Jan 27 23:47:19 CST 2019, modifyTime=Sun Jan 27 23:55:12 CST 2019, lastLoginTime=Thu Feb 14 22:56:38 CST 2019, ssex=0, theme=green, avatar=20180414165855.jpg, description=天下为公, roleName=null]"  org.springframework.validation.BindingResult.user: "org.springframework.validation.BeanPropertyBindingResult: 0 errors"','127.0.0.1','2019-2-16 21:35:30','内网IP|0|0|内网IP|内网IP' )
21:35:33.518 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.MenuMapper.findUserMenus
21:35:33.519 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 14 ms
21:35:33.519 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on(rm.role_id = r.role_id) left join t_user_role ur on(ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.create_time
21:35:37.447 febs [http-nio-8080-exec-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.DeptMapper.selectByExample
21:35:37.448 febs [http-nio-8080-exec-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
21:35:37.448 febs [http-nio-8080-exec-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT DEPT_ID,PARENT_ID,DEPT_NAME,ORDER_NUM,CREATE_TIME FROM t_dept order by dept_id
21:35:37.735 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample_COUNT
21:35:37.735 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:35:37.735 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:35:37.736 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample
21:35:37.737 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:35:37.737 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:35:38.466 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:35:38.466 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 4 ms
21:35:38.466 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1933,'admin','获取用户信息',404,'cn.hu.system.controller.TalentController.userList()','request: "QueryRequest{pageSize=10, pageNum=1}"  user: "User [userId=null, username=, password=null, deptId=null, deptName=null, front=null, back=null, email=null, mobile=null, status=, crateTime=null, modifyTime=null, lastLoginTime=null, ssex=null, theme=null, avatar=null, description=null, roleName=null]"','127.0.0.1','2019-2-16 21:35:38','内网IP|0|0|内网IP|内网IP' )
21:35:41.627 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.UserMapper.findUserWithRole
21:35:41.627 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 3 ms
21:35:41.627 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select u.user_id userId,u.username,u.dept_id deptId,u.email,u.mobile, u.status,u.ssex,ur.role_id roleId from t_user u left join t_user_role ur on (u.user_id = ur.user_id) where u.user_id = 4
21:36:23.227 febs [asyncTaskExecutor-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:36:23.227 febs [asyncTaskExecutor-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 11 ms
21:36:23.227 febs [asyncTaskExecutor-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1934,'admin','访问系统',0,'cn.hu.system.controller.LoginController.index()','user: "User [userId=4, username=admin, password=13bfb9844ba36ac930ba142d8c3db629, deptId=5, deptName=null, front=11, back=222, email=googlebrain@163.com, mobile=17600313199, status=1, crateTime=Sun Jan 27 23:47:19 CST 2019, modifyTime=Sun Jan 27 23:55:12 CST 2019, lastLoginTime=Thu Feb 14 22:56:38 CST 2019, ssex=0, theme=green, avatar=20180414165855.jpg, description=天下为公, roleName=null]"  org.springframework.validation.BindingResult.user: "org.springframework.validation.BeanPropertyBindingResult: 0 errors"','127.0.0.1','2019-2-16 21:36:23','内网IP|0|0|内网IP|内网IP' )
21:36:24.363 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.MenuMapper.findUserMenus
21:36:24.364 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 11 ms
21:36:24.364 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on(rm.role_id = r.role_id) left join t_user_role ur on(ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.create_time
21:36:28.576 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.DeptMapper.selectByExample
21:36:28.577 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 0 ms
21:36:28.577 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT DEPT_ID,PARENT_ID,DEPT_NAME,ORDER_NUM,CREATE_TIME FROM t_dept order by dept_id
21:36:28.792 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample_COUNT
21:36:28.792 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:36:28.793 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:36:28.794 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample
21:36:28.794 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:36:28.794 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:36:29.235 febs [asyncTaskExecutor-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:36:29.235 febs [asyncTaskExecutor-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 6 ms
21:36:29.235 febs [asyncTaskExecutor-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1935,'admin','获取用户信息',62,'cn.hu.system.controller.TalentController.userList()','request: "QueryRequest{pageSize=10, pageNum=1}"  user: "User [userId=null, username=, password=null, deptId=null, deptName=null, front=null, back=null, email=null, mobile=null, status=, crateTime=null, modifyTime=null, lastLoginTime=null, ssex=null, theme=null, avatar=null, description=null, roleName=null]"','127.0.0.1','2019-2-16 21:36:29','内网IP|0|0|内网IP|内网IP' )
21:36:32.357 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.UserMapper.findUserWithRole
21:36:32.357 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:36:32.358 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select u.user_id userId,u.username,u.dept_id deptId,u.email,u.mobile, u.status,u.ssex,ur.role_id roleId from t_user u left join t_user_role ur on (u.user_id = ur.user_id) where u.user_id = 4
21:38:52.326 febs [asyncTaskExecutor-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:38:52.326 febs [asyncTaskExecutor-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 4 ms
21:38:52.326 febs [asyncTaskExecutor-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1936,'admin','访问系统',1,'cn.hu.system.controller.LoginController.index()','user: "User [userId=4, username=admin, password=13bfb9844ba36ac930ba142d8c3db629, deptId=5, deptName=null, front=11, back=222, email=googlebrain@163.com, mobile=17600313199, status=1, crateTime=Sun Jan 27 23:47:19 CST 2019, modifyTime=Sun Jan 27 23:55:12 CST 2019, lastLoginTime=Thu Feb 14 22:56:38 CST 2019, ssex=0, theme=green, avatar=20180414165855.jpg, description=天下为公, roleName=null]"  org.springframework.validation.BindingResult.user: "org.springframework.validation.BeanPropertyBindingResult: 0 errors"','127.0.0.1','2019-2-16 21:38:52','内网IP|0|0|内网IP|内网IP' )
21:38:53.242 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.MenuMapper.findUserMenus
21:38:53.242 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 26 ms
21:38:53.242 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on(rm.role_id = r.role_id) left join t_user_role ur on(ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.create_time
21:38:57.508 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.DeptMapper.selectByExample
21:38:57.509 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
21:38:57.509 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT DEPT_ID,PARENT_ID,DEPT_NAME,ORDER_NUM,CREATE_TIME FROM t_dept order by dept_id
21:38:57.665 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample_COUNT
21:38:57.666 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
21:38:57.666 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:38:57.669 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample
21:38:57.669 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
21:38:57.669 febs [http-nio-8080-exec-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:38:58.369 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:38:58.369 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 9 ms
21:38:58.369 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1937,'admin','获取用户信息',270,'cn.hu.system.controller.TalentController.userList()','request: "QueryRequest{pageSize=10, pageNum=1}"  user: "User [userId=null, username=, password=null, deptId=null, deptName=null, front=null, back=null, email=null, mobile=null, status=, crateTime=null, modifyTime=null, lastLoginTime=null, ssex=null, theme=null, avatar=null, description=null, roleName=null]"','127.0.0.1','2019-2-16 21:38:58','内网IP|0|0|内网IP|内网IP' )
21:39:01.333 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.UserMapper.findUserWithRole
21:39:01.333 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:39:01.333 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select u.user_id userId,u.username,u.dept_id deptId,u.email,u.mobile, u.status,u.ssex,ur.role_id roleId from t_user u left join t_user_role ur on (u.user_id = ur.user_id) where u.user_id = 4
21:40:21.238 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:40:21.238 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 9 ms
21:40:21.238 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1938,'admin','访问系统',0,'cn.hu.system.controller.LoginController.index()','user: "User [userId=4, username=admin, password=13bfb9844ba36ac930ba142d8c3db629, deptId=5, deptName=null, front=11, back=222, email=googlebrain@163.com, mobile=17600313199, status=1, crateTime=Sun Jan 27 23:47:19 CST 2019, modifyTime=Sun Jan 27 23:55:12 CST 2019, lastLoginTime=Thu Feb 14 22:56:38 CST 2019, ssex=0, theme=green, avatar=20180414165855.jpg, description=天下为公, roleName=null]"  org.springframework.validation.BindingResult.user: "org.springframework.validation.BeanPropertyBindingResult: 0 errors"','127.0.0.1','2019-2-16 21:40:21','内网IP|0|0|内网IP|内网IP' )
21:40:22.303 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.MenuMapper.findUserMenus
21:40:22.303 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 16 ms
21:40:22.303 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on(rm.role_id = r.role_id) left join t_user_role ur on(ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.create_time
21:40:33.123 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.DeptMapper.selectByExample
21:40:33.123 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
21:40:33.123 febs [http-nio-8080-exec-7] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT DEPT_ID,PARENT_ID,DEPT_NAME,ORDER_NUM,CREATE_TIME FROM t_dept order by dept_id
21:40:33.460 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample_COUNT
21:40:33.460 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
21:40:33.460 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:40:33.462 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample
21:40:33.462 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:40:33.462 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:40:33.846 febs [asyncTaskExecutor-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:40:33.846 febs [asyncTaskExecutor-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 7 ms
21:40:33.846 febs [asyncTaskExecutor-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1939,'admin','获取用户信息',183,'cn.hu.system.controller.TalentController.userList()','request: "QueryRequest{pageSize=10, pageNum=1}"  user: "User [userId=null, username=, password=null, deptId=null, deptName=null, front=null, back=null, email=null, mobile=null, status=, crateTime=null, modifyTime=null, lastLoginTime=null, ssex=null, theme=null, avatar=null, description=null, roleName=null]"','127.0.0.1','2019-2-16 21:40:33','内网IP|0|0|内网IP|内网IP' )
21:40:36.446 febs [http-nio-8080-exec-9] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.UserMapper.findUserWithRole
21:40:36.446 febs [http-nio-8080-exec-9] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:40:36.446 febs [http-nio-8080-exec-9] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select u.user_id userId,u.username,u.dept_id deptId,u.email,u.mobile, u.status,u.ssex,ur.role_id roleId from t_user u left join t_user_role ur on (u.user_id = ur.user_id) where u.user_id = 4
21:43:56.819 febs [asyncTaskExecutor-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:43:56.819 febs [asyncTaskExecutor-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 10 ms
21:43:56.819 febs [asyncTaskExecutor-4] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1940,'admin','访问系统',0,'cn.hu.system.controller.LoginController.index()','user: "User [userId=4, username=admin, password=13bfb9844ba36ac930ba142d8c3db629, deptId=5, deptName=null, front=11, back=222, email=googlebrain@163.com, mobile=17600313199, status=1, crateTime=Sun Jan 27 23:47:19 CST 2019, modifyTime=Sun Jan 27 23:55:12 CST 2019, lastLoginTime=Thu Feb 14 22:56:38 CST 2019, ssex=0, theme=green, avatar=20180414165855.jpg, description=天下为公, roleName=null]"  org.springframework.validation.BindingResult.user: "org.springframework.validation.BeanPropertyBindingResult: 0 errors"','127.0.0.1','2019-2-16 21:43:56','内网IP|0|0|内网IP|内网IP' )
21:43:58.727 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.MenuMapper.findUserMenus
21:43:58.727 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 10 ms
21:43:58.727 febs [http-nio-8080-exec-6] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on(rm.role_id = r.role_id) left join t_user_role ur on(ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.create_time
21:44:02.587 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample_COUNT
21:44:02.587 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
21:44:02.588 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:44:02.590 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample
21:44:02.590 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
21:44:02.590 febs [http-nio-8080-exec-10] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:44:02.704 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.DeptMapper.selectByExample
21:44:02.705 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 6 ms
21:44:02.705 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT DEPT_ID,PARENT_ID,DEPT_NAME,ORDER_NUM,CREATE_TIME FROM t_dept order by dept_id
21:44:02.999 febs [asyncTaskExecutor-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:44:02.999 febs [asyncTaskExecutor-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 4 ms
21:44:03.000 febs [asyncTaskExecutor-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1941,'admin','获取用户信息',180,'cn.hu.system.controller.TalentController.userList()','request: "QueryRequest{pageSize=10, pageNum=1}"  user: "User [userId=null, username=, password=null, deptId=null, deptName=null, front=null, back=null, email=null, mobile=null, status=, crateTime=null, modifyTime=null, lastLoginTime=null, ssex=null, theme=null, avatar=null, description=null, roleName=null]"','127.0.0.1','2019-2-16 21:44:02','内网IP|0|0|内网IP|内网IP' )
21:44:06.809 febs [http-nio-8080-exec-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.UserMapper.findUserWithRole
21:44:06.809 febs [http-nio-8080-exec-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
21:44:06.809 febs [http-nio-8080-exec-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select u.user_id userId,u.username,u.dept_id deptId,u.email,u.mobile, u.status,u.ssex,ur.role_id roleId from t_user u left join t_user_role ur on (u.user_id = ur.user_id) where u.user_id = 4
21:44:19.987 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:44:19.987 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 9 ms
21:44:19.987 febs [asyncTaskExecutor-1] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1942,'admin','访问系统',0,'cn.hu.system.controller.LoginController.index()','user: "User [userId=4, username=admin, password=13bfb9844ba36ac930ba142d8c3db629, deptId=5, deptName=null, front=11, back=222, email=googlebrain@163.com, mobile=17600313199, status=1, crateTime=Sun Jan 27 23:47:19 CST 2019, modifyTime=Sun Jan 27 23:55:12 CST 2019, lastLoginTime=Thu Feb 14 22:56:38 CST 2019, ssex=0, theme=green, avatar=20180414165855.jpg, description=天下为公, roleName=null]"  org.springframework.validation.BindingResult.user: "org.springframework.validation.BeanPropertyBindingResult: 0 errors"','127.0.0.1','2019-2-16 21:44:19','内网IP|0|0|内网IP|内网IP' )
21:44:20.767 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.MenuMapper.findUserMenus
21:44:20.767 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 8 ms
21:44:20.767 febs [http-nio-8080-exec-8] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on(rm.role_id = r.role_id) left join t_user_role ur on(ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.create_time
21:44:23.973 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.DeptMapper.selectByExample
21:44:23.973 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:44:23.973 febs [http-nio-8080-exec-3] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT DEPT_ID,PARENT_ID,DEPT_NAME,ORDER_NUM,CREATE_TIME FROM t_dept order by dept_id
21:44:24.094 febs [http-nio-8080-exec-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample_COUNT
21:44:24.094 febs [http-nio-8080-exec-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:44:24.094 febs [http-nio-8080-exec-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:44:24.095 febs [http-nio-8080-exec-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.RoleMapper.selectByExample
21:44:24.096 febs [http-nio-8080-exec-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 1 ms
21:44:24.096 febs [http-nio-8080-exec-5] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> SELECT ROLE_ID,ROLE_NAME,REMARK,CREATE_TIME,MODIFY_TIME FROM t_role order by create_time
21:44:24.463 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.LogMapper.insert
21:44:24.463 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 4 ms
21:44:24.463 febs [asyncTaskExecutor-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> INSERT INTO t_log ( ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME,LOCATION ) VALUES( 1943,'admin','获取用户信息',60,'cn.hu.system.controller.TalentController.userList()','request: "QueryRequest{pageSize=10, pageNum=1}"  user: "User [userId=null, username=, password=null, deptId=null, deptName=null, front=null, back=null, email=null, mobile=null, status=, crateTime=null, modifyTime=null, lastLoginTime=null, ssex=null, theme=null, avatar=null, description=null, roleName=null]"','127.0.0.1','2019-2-16 21:44:24','内网IP|0|0|内网IP|内网IP' )
21:44:27.267 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句Id】>>>> cn.hu.system.dao.UserMapper.findUserWithRole
21:44:27.267 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句耗时】>>>> 2 ms
21:44:27.267 febs [http-nio-8080-exec-2] INFO  c.h.c.i.SqlStatementInterceptor - 【SQL语句】>>>> select u.user_id userId,u.username,u.dept_id deptId,u.email,u.mobile, u.status,u.ssex,ur.role_id roleId from t_user u left join t_user_role ur on (u.user_id = ur.user_id) where u.user_id = 4
21:44:55.265 febs [SessionValidationThread-1] INFO  o.a.s.s.m.AbstractValidatingSessionManager - Validating all active sessions...
21:44:55.506 febs [SessionValidationThread-1] INFO  o.a.s.s.m.AbstractValidatingSessionManager - Finished session validation.  No sessions were stopped.
